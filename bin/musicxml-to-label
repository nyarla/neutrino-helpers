#!/usr/bin/env perl

use strict;
use warnings;
use utf8;

our $VERSION = "v0.0.3";

use Getopt::Long
  qw( :config posix_default no_ignore_case bundling auto_help auto_version );
use Pod::Usage qw( pod2usage );

our $PREFIX =
  $ENV{'NEUTRINO_PREFIX'} || $ENV{'HOME'} . '/.local/share/neutrino';

sub makedir($) {
    my $path = shift;
    return -d $path || system( qw(mkdir -p), $path ) == 0;
}

sub err($) {
    my $msg = shift;
    print STDERR ( $msg, "\n" );
    exit 1;
}

sub main {
    local @ARGV = @_;

    if ( @ARGV == 0 ) {
        pod2usage( -extval => 0, -verbose => 1 );
    }

    my $score = q{};
    my $out   = q{};

    GetOptions(
        "score|musicxml|s|x=s" => \$score,
        "out|output|o=s"       => \$out,
        "help|h"    => sub { pod2usage( -exitval => 0, -verbose => 1 ); },
        "version|v" =>
          sub { print(( split q{/}, $0 )[-1], " - ", $VERSION, "\n"); exit 0 },
    ) or pod2usage( -exitval => 1, -verbose => 1 );

    if ( $score eq q{} ) {
          err "argument `score` is empty.";
    }

    if ( !-e $score ) {
          err "argument `score` (${score}) does not exists";
    }

    if ( -d $score ) {
          err "argument `score` is not file. it looks like directory?";
    }

    if ( $out eq q{} ) {
          err "argument `out` is empty.";
    }

    if ( -e $out && !-d $out ) {
          err "output directory already exists as file";
    }

    if ( !-d $out ) {
        makedir($out);
    }

    my $cmd = <<"...";
export LD_LIBRARY_PATH=${PREFIX}/lib:\${LD_LIBRARY_PATH:+:}\$LD_LIBRARY_PATH
test -d settings || cp -R ${PREFIX}/share/settings .
${PREFIX}/bin/musicxml-to-label ${score} ${out}/full.lab ${out}/mono.lab
...

    system( qw(sh -c), $cmd );
}

main(@ARGV);

=head1 NAME

musicxml-to-label - A wrapper script for NEUTRINO's musicXMLToLabel command

=head1 SYNOPSIS

  $ music-to-xml --score </path/to/score.musicxml> --out </path/to/out/dir>

=head1 OPTIONS

=head2 --score (alias: -s, -x or --musicxml)

A file of musicxml file

=head2 --out (alias: -o or --output)

A output directory proceed files.

=head1 SEE ALSO

L<https://n3utrino.work>

=head1 AUTHOR OF THIS SCRIPT

OKAMURA Naoki aka nyarla E<lt>nyarla@kalaclista.comE<gt>

=head1 LICENSE

This scripts is licensed under the same terms as Perl.

=cut
