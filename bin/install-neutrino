#!/usr/bin/env perl

use strict;
use warnings;

our $VERSION = "v0.2.0";

use Pod::Usage qw( pod2usage );
use File::Temp qw( tempdir );

our $prefix = $ENV{'NEUTRINO_PREFIX'}
  // $ENV{'HOME'} . '/.local/share/neutrino';

sub which {
  my $cmd  = shift;
  my $path = `which '${cmd}'`;

  chomp($path);

  return undef if ( $path eq q{} );
  return $path;
}

sub testing_which {
  my $cmd = which('which');

  like( $cmd, qr{/which$} );

  $cmd = which('');

  is( $cmd, undef );
}

sub unzip {
  my $unzip = which('unzip');
  if ( !defined $unzip || $unzip eq q{} ) {
    print STDERR "command is not found: unzip\n";
    exit 1;
  }

  my $file = which('file');
  if ( !defined $file || $file eq q{} ) {
    print STDERR "command is not found: file\n";
    exit 1;
  }

  my $zip  = shift;
  my $dest = shift;

  if ( !-e $zip ) {
    print STDERR "file does not exists: ${zip}\n";
    exit 1;
  }

  if ( `"${file}" '${zip}'` !~ m{Zip archive data}s ) {
    print STDERR "this file is not zip archive: ${zip}\n";
    exit 1;
  }

  my $result = system( $unzip, '-d', $dest, $zip );
  if ( $result != 0 ) {
    print STDERR "failed to unzip file: ${dest}: ${zip}\n";
  }

  return 1;
}

sub testing_unzip {
  my $zip = $ENV{'TEST_NEUTRINO_ONLINE'};
  if ( defined $zip && -e $zip ) {
    my $dest = tempdir( CLEANUP => 1 );
    ok( unzip( $zip, $dest ) );

    ok( -e "${dest}/NEUTRINO" );
  }
}

sub is_neutrino {
  my $dest = shift;

  if ( -e "${dest}/NEUTRINO" ) {
    return 1;
  }

  return 0;
}

sub testing_is_neutrino {
  my $dest = tempdir( CLEANUP => 1 );
  mkdir "${dest}/NEUTRINO";

  ok( is_neutrino($dest) );
}

sub is_model {
  my $bash = which("bash");
  if ( !defined $bash || $bash eq q{} ) {
    print STDERR "command not found: bash\n";
    exit 1;
  }

  my $grep = which("grep");
  if ( !defined $grep || $grep eq q{} ) {
    print STDERR "command not found: grep";
    exit 1;
  }

  my $dest   = shift;
  my $result = system( $bash, '-c', "ls '${dest}' | ${grep} NEUTRINO-Library" );

  return $result == 0;
}

sub testing_is_model {
  my $dest = tempdir( CLEANUP => 1 );

  mkdir "${dest}/---NEUTRINO-Library---";

  ok( is_model($dest) );
}

sub is_zip {
  my $file = which('file');
  if ( !defined $file || $file eq q{} ) {
    print STDERR "command is not found: file\n";
    exit 1;
  }

  my $zip = shift;
  return `"${file}" '${zip}'` =~ m{Zip archive data}s;
}

sub main {
  if ( @_ == 0 ) {
    pod2usage( -exitval => 0, -verbose => 2 );
  }

  if ( $_[0] eq '-h' || $_[0] eq '--help' ) {
    pod2usage( -exitval => 0, verbose => 1 );
  }

  if ( $_[0] eq '-v' || $_[0] eq '--version' ) {
    print STDOUT "install-neutrino - ${VERSION}\n";
    exit 0;
  }

  my $bash = which("bash");
  if ( !defined $bash || $bash eq q{} ) {
    print STDERR "command not found: bash\n";
    exit 1;
  }

  my $success = 0;

  if ( !-e "${prefix}/dist/NEUTRINO/model" ) {
    my $result = system( qw(mkdir -p), "${prefix}/dist/NEUTRINO/model" );
    if ( $result != 0 ) {
      print STDERR "faild to create install directory: ${prefix}/dist\n";
      exit 1;
    }
  }

  my @files = @_;
  for my $file (@files) {
    if ( !-e $file ) {
      print STDERR "file is not found: ${file}\n";
      next;
    }

    if ( !is_zip($file) ) {
      print STDERR "file is not zip archive: ${file}\n";
      next;
    }

    my $tmp = tempdir( CLEANUP => 1 );
    unzip( $file, $tmp );

    if ( is_neutrino($tmp) ) {
      my $result = system( qw(cp -R), "${tmp}/NEUTRINO/", "${prefix}/dist/" );

      if ( $result != 0 ) {
        print STDERR "failed to install NEUTRINO-Online to ${prefix}/dist\n";
        next;
      }

      $success++;
      print STDOUT "install NEUTRINO-Online successfully\n";
      next;
    }

    if ( is_model($tmp) ) {
      my $result = system(
        qq<bash -c 'cp -R "${tmp}"/*/* "${prefix}"/dist/NEUTRINO/model/'>);

      if ( $result != 0 ) {
        print STDERR "failed to install NEUTRINO Model: ${file}\n";
        next;
      }

      $success++;
      print STDOUT "install NEUTRINO model successfully: ${file}\n";
      next;
    }

    print STDERR
      "this file does not contian NEUTRINO or model files: ${file}\n";
  }

  return $success > 0;
}

sub testing_main {
  my $neutrino = $ENV{'TEST_NEUTRINO_ONLINE'};
  my $model    = $ENV{'TEST_NEUTRINO_MODEL'};

  my @argv;

  if ( defined $neutrino && -e $neutrino ) {
    push @argv, $neutrino;
  }

  if ( defined $model && -e $model ) {
    push @argv, $model;
  }

  if ( @argv == 0 ) {
    return;
  }

  local $prefix = tempdir( CLEANUP => 1 );
  ok( main(@argv) );
  ok( -e "${prefix}/dist/NEUTRINO" );
  ok( -e "${prefix}/dist/NEUTRINO/model" );
}

sub testing {
  eval {
    use Test::More;

    testing_which;
    testing_unzip;

    testing_is_neutrino;
    testing_is_model;

    testing_main;

    done_testing;
  };
}

(
  !!$ENV{'HARNESS_ACTIVE'}
  ? testing(@ARGV)
  : ( ( main(@ARGV) && exit 0 ) || exit 1 )
);

=encoding utf-8

=head1 NAME

install-neutrino - Installer script for NEUTRINO AI Singing Synthizer.

=head1 USAGE
 
  $ install-neutrino ~/Downloads/NEUTRINO-Online-v1.1.0.zip ~/Downloads/"No.7（NEUTRINO-Library）.zip" ...

=head1 SUPPORTED VERSION

NEUTRINO v1.1.0

=head1 SEE ALSO

L<https://n3utrino.work/>

L<https://github.com/nyarla/neutrino-helpers/>

=head1 AUTHOR OF THIS SCRIPT

OKAMURA Naoki aka nyarla E<lt>nyarla@kalaclista.comE<gt>

=head1 LICENSE

This script is same license of perl itself.

=cut
